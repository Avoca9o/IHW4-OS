Условие задачи: 
Военная задача. Анчуария и Тарантерия — два крохотных латиноамериканских государства, 
затерянных в южных Андах. Диктатор Анчуарии, 
дон Федерико, объявил войну диктатору Тарантерии, дону Эрнандо. У обоих 
диктаторов очень мало солдат, но очень
много снарядов для минометов, привезенных с последней американской гуманитарной 
помощью. Поэтому армии обеих сторон просто обстреливают наугад территорию противника, 
надеясь поразить минометы противника. Стрельба ведется хаотично до полного
уничтожения всех минометов противника, размещенных на некоторой прямоугольной 
площадке размером N*N. То есть координаты
целей, хоть и случайные, согласуются между разными минометчиками одной армии 
(это предохраняет от стрельбы в одну и ту же
точку). Интервалы между выстрелами (задержки) зависят от расстояния до точки 
попадания, формируемой случайно. Повторная
стрельба по одним и тем же координатам не производится. Количество минометов 
у каждой стороны одинаково и задается аргументом командной строки. Размер поля 
также задается в командной
строке. Создать приложение, моделирующее военные действия. Каждая страна — 
отдельный клиент. Сервер отвечает
за прием координат от клиентов и передает эти координаты другим клиентам. 
Он также получает информацию от клиентов об
их уничтожении. Расположение минометов порождается каждым клиентом случайно.

Сценарий решаемой задачи:
сервер:
для начала создает поля, генерируя на них и минометы в том числе, записывает три файла:
соотношение сил (count.txt), первое поле (field1.txt), где 1 - значит сюда еще не стреляли,
и 0 - значит поле уже мертво. Аналогично для второго файла.

координаты определяются следующим образом: есть размер поля n, все поле представляет собой 
квадрат n * n, но в программе он представлен линией для простоты. То есть если поле длины 5,
то координата 11, например, соответствует второму ряду и первой позиции с краю (при нумерации
с нуля и рядов, и позиций, буквально field[11 / 5][11 % 5])

Также он генерирует список координат минометов для каждой страны и записывает их в файл
Для того чтобы устранить возможные конфликты (хоть они и могут возникать только на стороне
клиента) при обращении к файлам в программе
используется именованный семафор /my_semaphore

Теперь о непосредственном взаимодействии: сервер может получать от клиентов команды,
(клиенты в данном случае это потоки каждой страны, поток представляет один конкретный миномет)
это либо "0", тогда сервер возвращает в ответе <кол-во оставшихся минометов у первой страны>
<кол-во оставшихся минометов у второй страны>, либо, если происходит выстрел, команда 
выглядит так: <номер страны><номер миномета><координата выстрела>. В случае, если 
данные миномет уже сбит, сервер отвечает "9" как своеобразную заглушку, это знак для
клиентского миномета, что ему пора выходить из игры. Иначе сервер помечает координату как
уже обстреленную, проверяет на то, не находится ли в этой координате вражеский для 
автора выстрела пулемет и возвращает оставшееся число действующих минометов вражеской команды.
Если же оказалось, что там был миномет, то выводится соответствующее сообщение в консоль.

В конце работы программы сервер закрывает использованный мьютекс

================================================================

клиент:
клиенты в целом похожи, отличаются только тем, что имеют стороны, из-за этого может меняться,
скажем так, направление выстрела, но действуют они похожим образом, поэтому опишу на примере 
первой страны.

Итак, она подключается к серверу и порождает необходимое количество минометов. В данном
случае именно миномет будет предоставлять роль клиента и выполняться в отдельном потоке.
Однако все минометы должны действовать сообща по условию, поэтому им необходимо работать
с одними и теми же данными. В целях избегания конфликтных ситуация были использованы 
неименованные семафоры.

Порядок работы одного миномета следующий: сначала он блокирует семафор, далее 
спрашивает у сервера соотношение сил, чтобы понять, не истреблена ли еще какая-либо команда
целиком. Он получает ответ, и если в обеих командах еще есть живая сила, то производит выстрел
выстрел происходит обязательно по той координате, по которой до этого никто не стрелял. 
Однако если при попытке выстрела выяснилось, что миномет уже сбит, он не производит этот выстрел
и завершает свою работу, не потратив возможный выстрел по этой координате своей страны.

Как уже было сказано раньше, при успешном обращении к серверу с выстрелом, сервер возвращает
новое число оставшихся минометов второй команды, и если выясняется, что количество минометов
после выстрела уменьшилось, выводится сообщение о том, что один из минометов вражеских был сбит.

После миномет освобождает семафор и засыпает на неопределенное время, имитируя тем самым дальность
выстрела.

================================================================

При запуске сервера ему передается порт, размер поля и количество минометов,
адрес же подбирается автоматически.
А вот при запуске клиентов необходимо передавать уже и адрес, и порт, и также 
размер поля и количество минометов.
Важный момент: необходимо подключать страны к серверу почти одновременно, 
иначе у одной из них будет несправедливое преимущество перед другой.

================================================================

Из ранее изученных программных объектов в работе использовались именованные
и неименованные семафоры, сигналы, а также потоки.

================================================================

приложение тестировалось на двух компьютерах, подкюлченных к одной сети WiFi

================================================================

результат работы программы можно посмотреть на прикрепленных картинках.
т.к. тестирование на 8 баллов лишь расширяет функционал, то и картинки
я подобрал одинаковые для всех. На данном этапе достаточно смотреть на 
два верхних терминала и нижний правый (это, соответственно, сервер и два
клиента - две страны) и убедиться в корректности их работы.